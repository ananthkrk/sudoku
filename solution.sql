-- THE VIEW CONTAINS THE DIGITS (1 TO 9)
CREATE OR REPLACE VIEW DIGITS AS SELECT LEVEL VL_VL FROM DUAL CONNECT BY LEVEL <10

/*
THE VIEW ALLVALUES CONTAINS ALL POSSIBLE COMBINATIONS OF VALUES
LIKE FIRST ROW FIRST COLUMN CAN TAKE 1,2,3,4,5,6,7,8,9..
SAME WAY FIRST ROW SECOND COLUMN CAN TAKE 1,2,3,4,5,6,7,8,9.. ETC..
*/
CREATE OR REPLACE VIEW ALLVALUES 
AS
SELECT R.VL_VL AS RW_NO, C.VL_VL AS CL_NO, V.VL_VL AS VL_VL
FROM DIGITS R,DIGITS C, DIGITS V
WHERE R.VL_VL>0 AND C.VL_VL>0 AND V.VL_VL>0


/*
CREATING A VIEW SUDOKU_WITH_NULL WHICH ASSIGNS NULL TO ALL INCOMPLETE CELLS
*/
CREATE OR REPLACE VIEW SUDOKU_WITH_NULL 
AS
SELECT SN.RW_NO, SN.CL_NO,SB.BLKNO,SN.VL_VL
FROM
SUDOKU_BLOCK SB,
(
SELECT AV.RW_NO RW_NO, AV.CL_NO CL_NO,SK.VL_VL VL_VL FROM SUDOKU SK,
(
SELECT DISTINCT RW_NO, CL_NO FROM ALLVALUES
) AV
WHERE SK.RW_NO(+) = AV.RW_NO 
AND SK.CL_NO(+) = AV.CL_NO
) SN
WHERE SN.RW_NO = SB.RW_NO
AND SN.CL_NO = SB.CL_NO


--THIS TABLE GENERATES ALL POSSIBLE VALUES THAT A ROW, COLUMN CAN HAVE
/*
FOR EG: CELL (1,1,N) HAS ALL POSSIBLE VALUES (VALUES N CAN TAKE) IS 1,2,3,4,5,6,7,8,9
SAME WAY IT GENERATES ALL POSSIBLE VALUES FOR ALL INCOMPLETE CELLS.
THE LOGIC IS SIMPLE..
CREATE A TABLE SUDOKU_ALLPOSSIBLE_VALUES
INSERT ALL POSSIBLE VALUES FOR ALL INCOMPLETE CELLS..
ONCE THE VALUES ARE POPULATED.. THEN START ELIMINATING FROM THAT TABLE (DELETING THE ELIMINATED VALUES)
*/
INSERT INTO SUDOKU_ALLPOSSIBLE_VALUES
(
SELECT 
AV.RW_NO,
AV.CL_NO ,
SD.BLKNO,
AV.VL_VL
FROM SUDOKU_WITH_NULL SD,
ALLVALUES AV
WHERE SD.RW_NO = AV.RW_NO
AND SD.CL_NO = AV.CL_NO
AND SD.VL_VL IS NULL
)

-- BASED ON THE SUDOKU DATA , THIS VIEW GENERATES ALL THE BLOCKED VALUES FOR THAT PARTICUALR ROW,COLUMN
/*
FOR EG: IF CELL(1,1) has value 1, THEN COMPLETE FIRST ROW, FIRST COLUMN, BLOCK (BLOCK TO WHICH THT CELL(1,1)
BELONGS) SHOULD NOT CONTAIN the value 1 in any other cell other than (1,1)...
THE FIRST INNER QUERY GENERATES WHAT VALUES A ROW CONTAINS AND THE OUTER QUERY JOINS WITH INNER QUERY TO GENERATE
LIST OF BLOCKED VALUES FOR ALL INCOMPLETE CELLS
*/
CREATE OR REPLACE VIEW SUDOKU_BLOCKED_VALUES
AS
-- START OF ROW WISE ELIMINATIONS
SELECT SD.RW_NO, SD.CL_NO,SD.BLKNO, SR.VL_VL
FROM 
SUDOKU_WITH_NULL SD,
(
SELECT DISTINCT RW_NO,VL_VL FROM SUDOKU_WITH_NULL WHERE VL_VL IS NOT NULL
) SR
WHERE SD.RW_NO = SR.RW_NO
AND SD.VL_VL IS NULL
-- END OF ROW WISE ELIMINATIONS
UNION
--START OF COLUMN ELIMINATIONS
SELECT SD.RW_NO, SD.CL_NO,SD.BLKNO, SR.VL_VL
FROM 
SUDOKU_WITH_NULL SD,
(
SELECT DISTINCT CL_NO,VL_VL FROM SUDOKU_WITH_NULL WHERE VL_VL IS NOT NULL
) SR
WHERE SD.CL_NO = SR.CL_NO
AND SD.VL_VL IS NULL
--END OF COLUMN ELIMINATIONS
UNION
--START OF BLOCK ELIMINATIONS
SELECT SD.RW_NO, SD.CL_NO,SD.BLKNO, SR.VL_VL
FROM 
SUDOKU_WITH_NULL SD,
(
SELECT DISTINCT BLKNO, VL_VL FROM SUDOKU_WITH_NULL WHERE VL_VL IS NOT NULL
) SR
WHERE SD.BLKNO = SR.BLKNO
AND SD.VL_VL IS NULL

--END OF STAGE 1

--STAGE 2
/*
TWIN VALUES 
SUPPOSE WE CAME A SITUATION WHERE CELL(1,3) AND CELL(2,3) WILL TAKE ONLY VALUES 6 & 9...
THEN BY EXAMINING THE TWO CELLS WE CAN DEDUCT THT COLUMN 3 CANNOT HAVE VALUES 6 & 9 (EXCEPT CELL(2,3) AND CELL(1,3)..
==> CELL(3,3), CELL(4,3), ... CELL(9,3) CANNOT TAKE VALUES 6 & 9.

*/
CREATE OR REPLACE VIEW SUDOKU_TWINVALUES
AS
SELECT RW_NO, CL_NO,MIN(VL_VL) AS MINVL, MAX(VL_VL) AS MAXVL FROM SUDOKU_ALLPOSSIBLE_VALUES GROUP BY RW_NO, CL_NO HAVING COUNT(*)=2

CREATE OR REPLACE VIEW 
SUDOKU_TWINELIM
AS
SELECT 
SE.RW_NO , 
SE.CL_NO,
SE.BLKNO,
SE.VL_VL
FROM SUDOKU_ALLPOSSIBLE_VALUES SE ,
(
SELECT T1.CL_NO, MIN(T1.RW_NO) AS MINRW, MAX(T1.RW_NO) AS MAXRW, T1.MINVL, T1.MAXVL
FROM 
SUDOKU_TWINVALUES T1,
SUDOKU_TWINVALUES T2 
WHERE T1.CL_NO = T2.CL_NO -- Must be in the same column
AND T1.MINVL = T2.MINVL -- Must have an identical 1st value
AND T1.MAXVL = T2.MAXVL -- Must have an identical 2nd value
AND T1.RW_NO != T2.RW_NO -- Must be in a different row.
GROUP BY T1.CL_NO, T1.MINVL, T1.MAXVL
) DT
WHERE SE.CL_NO = DT.CL_NO -- Must be in the same column
AND SE.VL_VL IN (DT.MINVL, DT.MAXVL) -- Must have at least one of the values
AND SE.RW_NO NOT IN (DT.MINRW,DT.MAXRW) -- Must not be in the same cells as our paired value cells.
UNION
SELECT 
SE.RW_NO , 
SE.CL_NO,
SE.BLKNO,
SE.VL_VL
FROM SUDOKU_ALLPOSSIBLE_VALUES SE ,
(
SELECT T1.RW_NO, MIN(T1.CL_NO) AS MINCL, MAX(T1.CL_NO) AS MAXCL, T1.MINVL, T1.MAXVL
FROM 
SUDOKU_TWINVALUES T1,
SUDOKU_TWINVALUES T2 
WHERE T1.RW_NO = T2.RW_NO -- Must be in the same row
AND T1.MINVL = T2.MINVL -- Must have an identical 1st value
AND T1.MAXVL = T2.MAXVL -- Must have an identical 2nd value
AND T1.CL_NO != T2.CL_NO -- Must be in a different col.
GROUP BY T1.RW_NO, T1.MINVL, T1.MAXVL
) DT
WHERE SE.RW_NO = DT.RW_NO -- Must be in the same row
AND SE.VL_VL IN (DT.MINVL, DT.MAXVL) -- Must have at least one of the values
AND SE.CL_NO NOT IN (DT.MINCL,DT.MAXCL) -- Must not be in the same cells as our paired value cells.

--END OF STAGE 2
--STAGE 3
/*
DUAL VALUES 
SUPPOSE WE FACE A SITUATION WHERE CELL(1,3) OR CELL(2,3) CAN HAVE VALUE 4. I MEAN ANY ONE CELL CAN HAVE THE VALUE 4 
THEN BY EXAMINING THE TWO CELLS WE CAN DEDUCT THT COLUMN 3 CANNOT HAVE VALUE 4 (EXCEPT CELL(2,3) OR CELL(1,3)..
==> CELL(3,3), CELL(4,3), ... CELL(9,3) CANNOT TAKE VALUE 4.
DUALVALUES 

*/

CREATE OR REPLACE VIEW
SUDOKU_DUALELIM
AS
SELECT 
SP.RW_NO,
SP.CL_NO,
SP.BLKNO,
SP.VL_VL
FROM
SUDOKU_ALLPOSSIBLE_VALUES SP,
(
SELECT 
MIN(CL_NO) CL_NO,
BLKNO,
VL_VL
FROM
(
SELECT CL_NO, BLKNO, VL_VL, COUNT(*) FROM SUDOKU_ALLPOSSIBLE_VALUES 
GROUP BY 
CL_NO, BLKNO, VL_VL
)
GROUP BY
BLKNO, VL_VL 
HAVING COUNT(*) = 1
) ST
WHERE
SP.CL_NO = ST.CL_NO AND
SP.BLKNO != ST.BLKNO AND
SP.VL_VL = ST.VL_VL
UNION
SELECT 
SP.RW_NO,
SP.CL_NO,
SP.BLKNO,
SP.VL_VL
FROM
SUDOKU_ALLPOSSIBLE_VALUES SP,
(
SELECT 
MIN(RW_NO) RW_NO,
BLKNO,
VL_VL
FROM
(
SELECT RW_NO, BLKNO, VL_VL, COUNT(*) FROM SUDOKU_ALLPOSSIBLE_VALUES 
GROUP BY 
RW_NO, BLKNO, VL_VL
)
GROUP BY
BLKNO, VL_VL 
HAVING COUNT(*) = 1
) ST
WHERE
SP.RW_NO = ST.RW_NO AND
SP.BLKNO != ST.BLKNO AND
SP.VL_VL = ST.VL_VL

--END OF STAGE 3
